# 执行命令流程
## 1. 基本流程
1. **查看规则**：
   * 打开.cursorrules文件
   * 阅读项目规范要求
   * 确认操作是否符合规范

2. **查看项目进度**：
   * 检查当前开发阶段
   * 确认下一步任务
   * 了解任务目标和要求

3. **执行开发任务**：
   * 按照规范编写代码
   * 遵循开发计划
   * 完成具体功能实现

4. **操作记录**：
   * 在每次完成功能开发后，立即执行以下步骤：
     1. 打开 .cursorrules 文件
     2. 找到 "## 5. 记录操作" 部分
     3. 在最后一条记录后添加新记录
     4. 按照以下格式添加：
        序号: xxx
        类型: [新增/修改/修复/优化/删除]
        模块: [功能模块名称]
        描述: [具体内容]
        状态: [完成/进行中/计划]
     6. .cursorrules 保存文件


## 2. 环境配置
### 2.1 基本信息
- 项目名称: cs.aiwanba.net
- 项目端口: 5010
- Python版本: 3.11.9
- 域名: localhost

### 2.2 启动配置
- 启动方式: gunicorn -c gunicorn_conf.py app:app
- 项目路径: /www/wwwroot/cs.aiwanba.net
- 当前框架: flask
- 入口文件: /www/wwwroot/cs.aiwanba.net/app.py
- 通讯协议: gunicorn
- 应用名称: app

### 2.3 数据库配置
- 数据库: MySQL 5.7.40
- 数据库名: cs_aiwanba_net
- 用户名: cs_aiwanba_net
- 密码: sQz9HSnF5ZcXj9SX
- 主机: localhost
- 端口: 3306

### 2.4 依赖管理
- 依赖文件: requirements.txt
- 镜像源: https://pypi.tuna.tsinghua.edu.cn/simple
- 安装命令: pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple

### 2.5 Gunicorn配置
配置文件路径: /www/wwwroot/cs.aiwanba.net/gunicorn_conf.py
主要配置:
- workers: 4
- threads: 2
- user: 'www'
- worker_class: 'uvicorn.workers.UvicornWorker'
- bind: '0.0.0.0:5010'
- 日志级别: info


## 3. 技术栈配置
### 3.1 后端技术栈
- **主框架**: Flask 2.0+ (提供RESTful API)
- **ORM框架**: SQLAlchemy 2.0+
- **数据库**: MySQL 5.7.40
- **缓存系统**: Flask-Caching (使用 SimpleCache 后端)
- **WebSocket**: Flask-SocketIO
- **跨域处理**: Flask-CORS

### 3.2 前端技术栈
- **框架**: Vue.js 3.0+ (独立部署)
- **UI组件库**: Element Plus
- **图表库**: ECharts 5.0+
- **构建工具**: Vite (用于前端打包)

### 3.3 开发工具
- **IDE**: VSCode
- **版本控制**: Git
- **数据库工具**: phpMyAdmin 5.2.1  
- **代码规范**: 
  - Python: PEP 8
  - JavaScript: ESLint

### 3.4 部署相关
- **Web服务器**: Nginx (同时用于前端静态文件和后端反向代理)
- **应用服务器**: Gunicorn
- **进程管理**: Supervisor

### 3.5 项目结构
```
project/
├── backend/          # Flask后端项目
│   ├── app.py
│   ├── models/
│   ├── routes/
│   └── services/
└── frontend/         # Vue前端项目
    ├── src/
    ├── public/
    └── index.html
```



