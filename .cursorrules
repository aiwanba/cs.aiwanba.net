# .cursorrules 文件模板
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次文件操作（创建/修改/删除）后必须立即更新本文件，确保记录与代码变更同步
- 每次编写代码必须更新本文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围
    - 目标需包含产品定位和核心功能
    - 范围应界定功能模块和技术边界
  - **编码标准**：定义代码风格、命名规范等
    - 需包含缩进、引号、分号等基础规则
    - 命名规范要区分变量/组件/常量
  - **首选库**：列出项目中使用的库及其版本
    - 格式：`库名称 | 语义化版本 | 主要用途`
    - 版本号必须使用^锁定主版本
  - **文件结构**：描述项目的目录结构和文件组织方式
    - 需说明核心目录作用
    - 重要配置文件的存放位置
  - **性能优化指南**：提供性能优化的建议和最佳实践
    - 包含加载优化、渲染优化等方案
    - 需注明适用场景和实现方式
  - **测试要求**：明确测试的范围、方法和工具
    - 单元测试覆盖率目标值
    - E2E测试的核心流程
  - **文档规范**：规定代码注释、README等的编写标准
    - 公共方法必须使用JSDoc注释
    - 复杂逻辑需添加行内说明
  - **错误处理**：定义错误处理机制和日志记录方式
    - 全局错误拦截方案
    - 日志分级和存储策略
  - **项目下一步**：明确后续计划
    - 区分已实现/未实现功能
    - 计划需包含优先级和预期时间
- 所有文件操作必须记录变更：
  - 创建文件需说明用途
  - 修改文件需描述变更内容
  - 版本变更遵循语义化版本规范
- 文件维护要求：
  - 保持.cursorrules与实际代码完全同步
  - 变更记录需在操作完成后立即更新
  - 代码提交前必须校验.cursorrules更新状态
  - 版本发布时必须校验变更记录完整性

---

## 项目背景
- **项目目标**：  
  开发Web在线股票交易模拟游戏，通过玩家与AI的交互行为动态生成市场环境，核心功能模块包括：
  1. 公司系统
  - 玩家创建公司/设定股票发行参数
  - 股票价值由市场供需动态决定
  - 支持公司收购与合并机制
  2. 交易所系统
  - 实时股票交易市场（玩家+AI）
  - 价格完全由供需关系驱动
  - 提供实时交易数据可视化
  3. 银行系统
  - 动态利率资金管理系统
  - 贷款/存款/利息计算功能
  - 经济政策自动调节机制
  4. 新闻事件系统
  - 玩家行为触发新闻机制
  - AI决策生成事件系统
  - 市场情绪影响模型
  5. AI行为系统
  - 多策略投资算法（长期/短期/激进）
  - 动态调整的行为决策树
  - 市场复杂性生成模块
  6. 社交系统
  - 实时聊天/论坛功能
  - 投资联盟组建机制
  7. 分析工具
  - 股票走势可视化工具
  - 公司财务分析模块
  8. 成就系统
  - 投资里程碑成就
  - 实时财富排行榜

- **项目范围**：  
  - 核心模块：公司管理、股票交易、AI行为、经济系统
  - 技术边界：
    - 基于浏览器的2D界面
    - 使用WebSocket实现实时交易
    - 排除移动端原生支持
    - 不涉及真实货币交易

---

## 编码标准
- **代码风格**：
  - 遵循PEP8规范，4空格缩进，行宽不超过120字符
  - WebSocket处理使用async/await语法
  - 经济计算使用Decimal保持精度
  - 类型提示强制用于核心模块（mypy检查）
  - WebSocket消息格式使用Protocol Buffers序列化
  - 金融计算必须通过Decimal类型处理浮点数

- **命名规范**：
  - 类名：大驼峰式（StockExchange）
  - 常量：全大写加下划线（MAX_STOCK_QUANTITY）
  - 私有变量：_前缀加小写（_internal_cache）
  - 事件处理：on_动词_名词（on_buy_stock）

---

## 首选库
| 库名称 | 版本 | 用途 |
|--------|------|------|
| Flask | ^2.3.3 | Web应用框架 |
| Gunicorn | ^21.2.0 | WSGI HTTP服务器 |
| PyMySQL | ^1.1.0 | MySQL数据库连接 |

---

## 文件结构
| 文件夹 | 文件描述 |
|--------|----------|
| doc/ | 存放项目文档，包含部署配置、架构设计等 |
| /www/wwwlogs/python/ | 生产环境日志存储目录 |
| /www/wwwroot/ | 生产环境代码部署目录 |
| static/ | 前端静态资源目录（JS/CSS/图表库） |
| templates/ | 网页模板存放目录 |

---

## 性能优化指南
1. **数据库优化**：
  - 股票交易表添加复合索引（股票ID+时间戳）
  - 批量写入交易记录（每100笔提交一次）
2. **WebSocket优化**：
  - 设置最大并发连接数（1000连接/进程）
  - 使用消息压缩（zlib级别3）
3. **缓存策略**：
  - Redis缓存热门股票实时报价（TTL 1秒）
  - LRU缓存最近10笔交易记录
4. **AI计算优化**：
  - 使用原生Python实现策略逻辑
  - 优化算法时间复杂度

---

## 测试要求
1. **单元测试**：
  - 核心算法覆盖率≥90%（价格计算、利率模型）
  - 每个AI策略需包含5种边界条件测试
2. **集成测试**：
  - 模拟100并发用户交易操作
  - 验证经济系统连锁反应
3. **性能测试**：
  - 交易延迟≤50ms（P99）
  - 订单吞吐量≥1000笔/秒
4. **WebSocket连接稳定性测试**：
  - 24小时不断线
5. **市场波动模拟测试**：
  - ±20%价格震荡
**工具链**：
  - pytest + coverage（单元测试）
  - Locust（压力测试）
  - Selenium（E2E测试）

---

## 文档规范
- **代码注释**：
  - 经济模型公式使用LaTeX注释
  - AI决策节点添加行为树图示说明
  - 复杂交易逻辑添加状态迁移图

- **API文档**：
  - 使用OpenAPI 3.0规范
  - 包含错误代码对照表（4xx/5xx）
  - WebSocket消息协议单独成章

---

## 错误处理
1. **异常分类**：
  - 业务错误（余额不足等）：4xx
  - 系统错误（数据库连接等）：5xx
  - AI决策超时：特殊代码5031
2. **日志规范**：
  - 交易错误记录完整上下文
  - 敏感信息脱敏（用户ID→UID:XXXX）
3. **熔断机制**：
  - 连续5次数据库错误触发熔断
  - 价格计算异常超过1%流量降级
4. **监控报警**：
  - 记录关键指标到日志文件
  - 使用基础监控告警机制
5. **WebSocket连接中断自动重连机制**：
  - 最多3次
6. **交易请求幂等性保证**：
  - 重复提交过滤

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 1 | doc/生产环境部署配置文档.md | 记录生产环境部署配置标准，包含服务器配置、数据库设置、Gunicorn参数及日志管理规范 |

### 修改文件
| 序列号 | 文件名称 | 修改内容 |
|-------|----------|----------|
| 3 | .cursorrules | 添加生产环境文档创建记录，更新文件结构描述 |

### 版本变更
| 版本号 | 变更说明 |
|-------|----------|
| 0.1.0 | 初始化项目配置文档，添加生产环境部署规范 |

---

## 项目下一步
### 已实现功能
- （已实现功能列表）

### 未实现功能
- 公司收购与合并机制
- 经济政策自动调节模块
- 市场情绪影响模型
- 投资联盟组建功能

### 下一步计划
1. 优先实现交易所核心交易系统（2周）
2. 开发基础银行资金管理系统（1周）
3. 构建AI基础决策树（3天）
4. 实现实时交易数据可视化（5天）