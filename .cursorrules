# .cursorrules 文件
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

---

## 重要提示
- 每次编写代码必须更新 `.cursorrules` 文件，确保涵盖以下关键内容：
  - 项目背景：明确项目的目标和范围。
  - 编码标准：定义代码风格、命名规范等。
  - 首选库：列出项目中使用的库及其版本。
  - 文件结构：描述项目的目录结构和文件组织方式。
  - 性能优化指南：提供性能优化的建议和最佳实践。
  - 测试要求：明确测试的范围、方法和工具。
  - 文档规范：规定代码注释、README 文件等的编写标准。
  - 错误处理：定义错误处理机制和日志记录方式。
  - 项目下一步：明确项目下一步的计划和目标。
- 所有文件操作（创建、添加、修改、更新、优化、删除）必须记录序列号、文件名称和文件描述。

### 强制文档更新规则
1. **实时更新要求**：
   - 任何文件操作（创建/修改/删除）后必须立即更新本文件
   - 代码变更与文档更新必须作为同一个提交
   - 禁止先写代码后补文档

2. **变更记录规范**：
   - 每个变更必须包含：序列号、文件名称、精确的操作描述
   - 使用动词+名词结构描述（如：添加股票限价单接口）
   - 保持序列号严格递增，禁止重复或跳跃

3. **版本控制**：
   - 每次功能发布必须更新版本历史
   - 版本号遵循语义化版本规范（主版本.次版本.修订号）

4. **验证机制**：
   - 代码评审必须包含文档变更检查
   - 持续集成流程加入文档完整性校验
   - 未更新文档的PR直接驳回

5. **内容范围**：
   - 项目背景：明确项目的目标和范围。
   - 编码标准：定义代码风格、命名规范等。
   - 首选库：列出项目中使用的库及其版本。
   - 文件结构：描述项目的目录结构和文件组织方式。
   - 性能优化指南：提供性能优化的建议和最佳实践。
   - 测试要求：明确测试的范围、方法和工具。
   - 文档规范：规定代码注释、README 文件等的编写标准。
   - 错误处理：定义错误处理机制和日志记录方式。
   - 项目下一步：明确项目下一步的计划和目标。

6. **变更记录规范**：
   - 每个文件操作必须包含：序列号、文件名称、文件描述
   - 使用表格形式记录，保持列对齐
   - 文件描述需包含动词和具体变更内容（如：添加用户注册接口）

7. **处罚条款**：
   - 累计3次未更新文档的开发者暂停提交权限
   - 重大文档缺失视为P0级故障
   - 文档不准确导致的返工计入开发者KPI

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称              | 文件描述                     |
|-------|-----------------------|------------------------------|
| 001   | app.py                | 创建Flask应用入口文件         |
| 002   | base.html             | 创建基础模板文件             |
| 004   | gunicorn_conf.py       | 创建Gunicorn生产环境配置文件 |
| 005   | (已删除)         |
| 006   | init_db.sql           | 创建数据库初始化脚本         |
| 007   | stock_operations.py   | 创建股票交易核心逻辑         |
| 008   | bank_operations.py    | 创建银行系统核心逻辑         |
| 009   | database.py           | 创建数据库连接公共模块       |
| 010   | fee_calculator.py     | 创建交易手续费计算模块       |
| 011   | order_book.py        | 创建限价单订单簿管理模块       |
| 012   | merger_detector.py    | 创建公司合并检测模块         |
| 013   | analysis_operations.py | 创建交易分析模块         |
| 014   | order_manager.py      | 创建订单管理模块             |
| 015   | ai_strategies.py     | 创建AI策略模块               |
| 016   | ai_scheduler.py       | 创建AI定时交易模块           |

### 添加文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|


### 修改文件
| 序列号 | 文件名称         | 文件描述                     |
|-------|------------------|------------------------------|
| 001   | app.py           | 添加首页路由                 |
| 002   | base.html        | 添加导航栏                   |
| 003   | app.py           | 移除SQLAlchemy相关配置       |
| 004   | app.py           | 添加股票交易接口路由         |
| 005   | app.py           | 明确端口使用说明             |
| 006   | app.py           | 添加银行系统接口路由及导入   |
| 007   | app.py           | 重构数据库连接配置           |
| 008   | bank_operations.py | 更新数据库连接导入方式       |
| 009   | app.py           | 添加手续费计算逻辑           |
| 010   | app.py           | 添加限价单交易接口           |
| 011   | stock_operations.py | 实现限价单匹配逻辑           |
| 013   | stock_operations.py | 添加合并检测逻辑           |
| 014   | init_db.sql      | 添加公司持股表结构         |
| 015   | app.py           | 添加交易分析接口           |
| 016   | init_db.sql      | 添加交易分析视图           |
| 017   | app.py           | 添加订单撤销接口             |
| 018   | init_db.sql      | 添加订单撤销记录表结构       |
| 019   | init_db.sql      | 添加AI玩家表结构             |
| 020   | app.py           | 添加AI管理接口               |
| 021   | ai_strategies.py | 添加市场波动分析逻辑         
| 022   | ai_scheduler.py  | 创建AI定时交易模块           
| 023   | ai_strategies.py | 添加策略执行方法             |
| 024   | ai_scheduler.py  | 实现定时交易调度逻辑         |


### 更新文件
| 序列号 | 文件名称         | 文件描述                     |
|-------|------------------|------------------------------|
| 004   | requirements.txt | 移除flask-sqlalchemy依赖     |


### 优化文件
| 序列号 | 文件名称         | 文件描述                     |
|-------|------------------|------------------------------|
| 001   | gunicorn_conf.py | 优化worker数量动态计算逻辑   |

### 删除文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 005   | models.py | 删除模型文件 |
---

## 项目背景
这是一个多人在线的股票交易游戏程序，包含以下主要功能模块：
1. **股票系统**：
   - 每个股票代表一家公司。
   - 公司基本信息包括公司名称、创建时间、所属玩家、初始资金等。
   - 支持股票交易，包括市价单和限价单。
   - 实时更新股票价格。
   - 持有超过51%股份的玩家获得公司控制权。
   - 当一家公司持有另一家公司80%股份时，两家公司自动合并。
2. **银行系统**：
   - 记录每笔交易和每家公司的账户余额。
   - 提供存款、取款、转账等基本功能。
   - 记录交易的详细信息，包括交易时间、类型、金额和双方。
3. **交易系统**：
   - 记录每家公司的交易情况。
   - 提供交易历史查询功能。
4. **AI系统**：
   - 管理AI玩家，支持创建AI玩家并进行交易。
   - AI玩家具备不同的交易策略，如保守型、激进型、平衡型。
   - AI玩家可以学习其他玩家的交易模式，优化自身策略。

---

## 编码标准

---

## 首选库
- **编程语言**：Python 3.11.9
- **Web框架**：Flask
- **数据库驱动**：pymysql
- **模板引擎**：Jinja2
- **WSGI服务器**：Gunicorn
- **数据库**：MySQL 5.7.40
- **依赖管理**：通过`requirements.txt`文件管理依赖包，使用清华大学的PyPI镜像源 [https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)。
- **架构决策**：保持简单架构，使用Flask内置的Jinja2模板引擎，不引入额外的复杂技术栈，以降低维护成本和提高开发效率。

---

## 性能优化指南
- 使用Gunicorn多进程模式提高并发处理能力
- 优化数据库查询，避免N+1查询问题
- 使用MySQL索引优化查询性能
- 合理使用Flask的上下文管理，避免资源泄漏

---

## 测试要求
- 使用unittest进行单元测试
- 使用Flask的测试客户端进行API测试
- 测试覆盖率目标：核心功能80%以上

---

## 文档规范
- API文档使用Flask自带的文档字符串生成
- 部署文档保持简洁，只包含必要信息
- 代码注释遵循PEP 8规范

---

## 文件结构 （根据当前项目实际文件结构，也要更新）
project/
├── app.py                # Flask应用入口文件
├── requirements.txt      # 项目依赖管理文件
├── database.py          # 数据库连接公共模块
├── bank_operations.py   # 银行系统核心逻辑
├── stock_operations.py  # 股票交易核心逻辑
├── fee_calculator.py    # 交易手续费计算模块
├── gunicorn_conf.py     # Gunicorn生产环境配置
├── init_db.sql          # 数据库初始化脚本
├── templates/            # Jinja2模板文件目录
│   ├── base.html         # 基础模板文件
│   └── ...               # 其他模板文件
└── static/               # 静态资源目录
    ├── css/
    ├── js/
    └── images/

---

## 错误处理

---

## 项目下一步
### 已实现功能
- 基础Flask应用框架搭建
- 生产环境部署配置
- 数据库连接管理
- 银行系统存款/取款接口
- 股票交易市价单功能
- 交易手续费计算（费率0.3%）
- 股票限价单交易功能
- 公司合并检测机制
- 交易历史分析功能
- 订单撤销功能
- AI玩家基础框架
- 完善AI交易策略

### 未实现功能
- AI玩家策略系统
- 交易历史分析功能

### 下一步计划 （也要更新）
- 1. 完善AI交易策略
+ 1. 实现AI学习机制
+ 2. 添加交易异常检测
+ 3. 优化批量交易性能

#### 新增注意事项
- 开发环境与生产环境使用不同端口
- 补充接口测试文档

## 版本历史
| 版本号 | 更新说明                   |
|--------|----------------------------|
| v1.4.1 | 添加强制文档更新规则体系    |
| v1.4.0 | 实现股票限价单交易功能      |
| v1.5.0 | 实现公司合并检测机制        |
| v1.6.0 | 实现交易历史分析功能        |
| v1.6.1 | 更新项目路线图              |
| v1.7.0 | 实现订单撤销功能            |
| v1.8.0 | 实现AI玩家基础框架          |
| v1.9.0 | 实现AI策略动态调整机制      |
| v1.9.1 | 添加AI定时交易调度功能      |

---
