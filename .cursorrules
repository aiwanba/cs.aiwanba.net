# .cursorrules 文件模板
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次文件操作（创建/修改/删除）后必须立即更新本文件，确保记录与代码变更同步
- 每次编写代码必须更新本文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围
    - 目标需包含产品定位和核心功能
    - 范围应界定功能模块和技术边界
  - **编码标准**：定义代码风格、命名规范等
    - 需包含缩进、引号、分号等基础规则
    - 命名规范要区分变量/组件/常量
  - **首选库**：列出项目中使用的库及其版本
    - 格式：`库名称 | 语义化版本 | 主要用途`
    - 版本号必须使用^锁定主版本
  - **文件结构**：描述项目的目录结构和文件组织方式
    - 需说明核心目录作用
    - 重要配置文件的存放位置
  - **性能优化指南**：提供性能优化的建议和最佳实践
    - 包含加载优化、渲染优化等方案
    - 需注明适用场景和实现方式
  - **文档规范**：规定代码注释、README等的编写标准
    - 公共方法必须使用JSDoc注释
    - 复杂逻辑需添加行内说明
  - **错误处理**：定义错误处理机制和日志记录方式
    - 全局错误拦截方案
    - 日志分级和存储策略
  - **项目下一步**：明确后续计划
    - 区分已实现/未实现功能
    - 计划需包含优先级和预期时间
- 所有文件操作必须记录变更：
  - 创建文件需说明用途
  - 修改文件需描述变更内容
  - 版本变更遵循语义化版本规范
- 文件维护要求：
  - 保持.cursorrules与实际代码完全同步
  - 变更记录需在操作完成后立即更新
  - 代码提交前必须校验.cursorrules更新状态
  - 版本发布时必须校验变更记录完整性

---

## 项目背景
- **项目目标**：  
  构建一个基于 Flask 框架的在线股票交易游戏平台，让玩家通过与 AI 玩家互动，体验真实的股票市场交易过程，学习投资策略和风险管理。

- **项目范围**：  
  1. 核心功能模块：
     - 用户认证系统（登录、注册、权限管理）
     - 公司管理系统（创建、股票发行、收购合并）
     - 交易所系统（实时交易、价格走势）
     - 银行系统（存贷款、利率管理）
     - 新闻事件系统（市场动态、公司公告）
     - AI 玩家行为系统（自动交易、策略执行）
     - 社交互动系统（聊天、评论、关注）
     - 市场分析工具（技术指标、基本面分析）
     - 成就与排行榜系统

  2. 技术实现范围：
     - Web 服务端开发（Flask框架）
     - 实时数据处理（WebSocket）
     - 数据库交互（MySQL）
     - AI 行为算法实现
     - API 接口服务
     - 前端技术栈：
       - HTML5 + CSS3：基础页面结构和样式
       - Bootstrap 5：响应式布局和基础组件
       - jQuery：DOM操作和AJAX请求
       - Chart.js：股票走势图表展示
     - 实时消息推送
     - 性能优化和安全防护

  3. 用户交互范围：
     - 玩家操作界面
     - 实时市场数据展示
     - 社交互动功能
     - 数据分析工具
     - 排行榜系统

---

## 编码标准
- **代码风格**：  
  - Python 代码遵循 PEP 8 规范
  - 使用 4 空格缩进
  - 文件使用 UTF-8 编码
- **命名规范**：  
  - 变量和函数使用小写字母加下划线
  - 类名使用驼峰命名
  - 常量使用大写字母加下划线

---

## 首选库
| 库名称 | 版本 | 用途 |
|--------|------|------|
| Flask | ^2.3.3 | Web 框架 |
| Werkzeug | ^2.3.7 | WSGI 工具库 |
| SQLAlchemy | ^2.0.23 | ORM 框架 |
| Flask-SQLAlchemy | ^3.1.1 | Flask SQLAlchemy 集成 |
| PyMySQL | ^1.1.0 | MySQL Python 驱动 |
| mysqlclient | ^2.2.4 | MySQL C 驱动 |
| gunicorn | ^20.1.0 | WSGI HTTP 服务器 |
| eventlet | ^0.33.3 | Socket.IO异步支持 |
| Flask-SocketIO | ^5.3.4 | WebSocket 实时通信 |
| Flask-Login | ^0.6.2 | 用户认证管理 |
| Flask-WTF | ^1.1.1 | 表单验证和CSRF保护 |
| PyJWT | ^2.7.0 | JWT token认证 |
| APScheduler | ^3.10.1 | 定时任务调度 |
| pandas | ^2.0.3 | 数据分析处理 |
| numpy | ^1.24.3 | 数值计算支持 |

---

## 文件结构
| 文件夹/文件 | 文件描述 |
|--------|----------|
| /www/wwwroot/cs.aiwanba.net/ | 项目根目录 |
| ├── app.py | Flask应用入口文件 |
| ├── gunicorn_conf.py | Gunicorn配置文件 |
| ├── requirements.txt | 项目依赖文件 |
| ├── .cursorrules | 项目规范文件 |
| ├── .gitignore | Git忽略文件 |
| ├── apps/ | 应用代码目录 |
| │   ├── __init__.py | 应用包初始化文件 |
| │   ├── extensions.py | Flask扩展初始化文件 |
| │   ├── models/ | 数据模型目录 |
| │   ├── services/ | 服务层目录 |
| │   └── api/ | API接口目录 |
| ├── templates/ | 模板目录 |
| ├── static/ | 静态文件目录 |
| ├── scripts/ | 脚本目录 |
| │   └── init_db.sql | 数据库初始化脚本 |
| └── doc/ | 文档目录 |
| /www/wwwlogs/python/cs_aiwanba_net/ | 日志目录 |

---

## 性能优化指南
- 使用 Gunicorn 多进程部署(4个工作进程)
- 每个进程配置2个线程
- 使用 uvicorn.workers.UvicornWorker 作为工作模式
- 配置合适的日志级别(info)避免性能损耗
- 使用 WebSocket 实现实时数据推送
- 实现数据缓存机制
- 优化数据库查询性能

## 文档规范
- **代码注释**：  
  - 所有函数必须包含功能说明
  - 复杂逻辑需要详细的行内注释
  - 所有类必须有文档字符串
- **API文档**：  
  - 所有接口需要标注请求方法、参数和返回值
  - 接口文档需要包含示例
  - WebSocket事件必须详细说明

---

## 错误处理
- 错误日志路径：/www/wwwlogs/python/cs_aiwanba_net/gunicorn_error.log
- 访问日志路径：/www/wwwlogs/python/cs_aiwanba_net/gunicorn_acess.log
- 日志级别设置为 info
- 使用 Gunicorn 的内置错误处理机制
- 实现全局异常处理
- 记录详细的错误堆栈信息

---

## 部署配置
### 基本信息
- **项目名称**: cs_aiwanba_net
- **项目端口**: 5010
- **Python版本**: 3.11.9
- **域名**: localhost

### 数据库配置
- **数据库**: MySQL 5.7.40
- **数据库名**: cs_aiwanba_net
- **用户名**: cs_aiwanba_net
- **密码**: sQz9HSnF5ZcXj9SX
- **主机**: localhost
- **端口**: 3306

### 启动配置
- **启动命令**: gunicorn -c gunicorn_conf.py app:app
- **项目路径**: /www/wwwroot/cs.aiwanba.net
- **框架**: flask
- **入口文件**: app.py

---

## 文件变更记录
### 最新变更
1. 移除了数据库迁移相关代码和文件
2. 添加了 scripts/init_db.sql 用于数据库初始化
3. 更新了 app.py 移除迁移相关代码
4. 更新了 extensions.py 移除迁移相关代码
5. 更新了项目文档

### 下一步计划
1. 完善用户认证系统
2. 实现实时交易功能
3. 开发 AI 交易策略
4. 添加市场分析工具
5. 优化系统性能
6. 完善错误处理机制
