# .cursorrules 文件模板
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次文件操作（创建/修改/删除）后必须立即更新本文件，确保记录与代码变更同步
- 每次编写代码必须更新本文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围
    - 目标需包含产品定位和核心功能
    - 范围应界定功能模块和技术边界
  - **编码标准**：定义代码风格、命名规范等
    - 需包含缩进、引号、分号等基础规则
    - 命名规范要区分变量/组件/常量
  - **首选库**：列出项目中使用的库及其版本
    - 格式：`库名称 | 语义化版本 | 主要用途`
    - 版本号必须使用^锁定主版本
  - **文件结构**：描述项目的目录结构和文件组织方式
    - 需说明核心目录作用
    - 重要配置文件的存放位置
  - **性能优化指南**：提供性能优化的建议和最佳实践
    - 包含加载优化、渲染优化等方案
    - 需注明适用场景和实现方式
  - **测试要求**：明确测试的范围、方法和工具
    - 单元测试覆盖率目标值
    - E2E测试的核心流程
  - **文档规范**：规定代码注释、README等的编写标准
    - 公共方法必须使用JSDoc注释
    - 复杂逻辑需添加行内说明
  - **错误处理**：定义错误处理机制和日志记录方式
    - 全局错误拦截方案
    - 日志分级和存储策略
  - **项目下一步**：明确后续计划
    - 区分已实现/未实现功能
    - 计划需包含优先级和预期时间
- 所有文件操作必须记录变更：
  - 创建文件需说明用途
  - 修改文件需描述变更内容
  - 版本变更遵循语义化版本规范
- 文件维护要求：
  - 保持.cursorrules与实际代码完全同步
  - 变更记录需在操作完成后立即更新
  - 代码提交前必须校验.cursorrules更新状态
  - 版本发布时必须校验变更记录完整性

---

## 项目背景
- **项目目标**：  
- 开发一款Web在线股票交易游戏，玩家和AI玩家通过自己的行为和决策共同创造游戏内的经济和市场环境，体验股票市场的交易过程，学习投资策略和风险管理。游戏的核心模块包括：
  1.公司模块：
    玩家可以创建和管理自己的公司，包括设定公司业务、财务状况、股票发行等。
    公司的经营决策（如投资、扩张、分红等）由玩家自主制定，直接影响公司的发展和股票价值。
    AI玩家也会创建和管理自己的公司，其决策由预设的算法和规则驱动，与玩家公司相互竞争。
  2.银行模块：
    玩家可以通过银行进行资金管理，如存款、贷款、利息计算等。
    银行模块为玩家提供资金支持和风险管理工具，例如抵押贷款、信用额度等。
    银行的利率和政策会根据游戏内的经济环境动态调整，由玩家和AI玩家的经济活动共同驱动。
  3.交易所模块：
    玩家和AI玩家在交易所进行股票买卖交易。
    股票价格由市场供需关系决定，玩家和AI玩家的交易行为直接影响股票价格和市场动态。
    交易所模块需要实时更新股票价格、交易记录和市场信息，确保所有玩家都能在公平透明的环境中进行交易。
- **项目范围**：
  1.功能范围
    用户管理：支持玩家注册、登录、个人资料管理等功能。
    公司创建与管理：玩家可以自定义公司名称、业务范围、初始资金等，并通过经营决策影响公司发展。
    银行服务：提供存款、贷款、利息计算等金融服务，银行的利率和政策会根据游戏内的经济活动动态调整。
    股票交易：玩家和AI玩家可以在交易所进行股票买卖，股票价格由市场供需关系实时决定。
    AI玩家行为：AI玩家的行为由算法驱动，包括公司经营决策、股票买卖等，与玩家行为相互影响。
    市场动态：实时展示股票价格、交易记录、市场趋势等信息，确保玩家能够及时获取市场动态。
    数据分析：提供市场分析工具，帮助玩家分析公司财务状况、市场趋势等，辅助投资决策。
  2.技术范围：  
    数据库设计：设计合理的数据库架构，存储用户数据、公司数据、交易记录等信息。
    AI模块：开发基于规则引擎或机器学习的AI玩家，使其行为与玩家行为相互影响，共同塑造游戏内的经济环境。
    数据可视化：集成图表库（ECharts）实现数据可视化功能，帮助玩家更好地理解市场动态。
 
---

## 编码标准
- **代码风格**：  
  （在此定义代码风格）
- **命名规范**：  
  （在此定义命名规范）

---

## 文件结构
| 文件夹 | 文件描述 |
|--------|----------|
| doc/   | 技术文档目录 |
|        |          |

---

## 部署规范
### 环境配置
- **Python版本**: 3.11.9
- **数据库**: MySQL ≥5.7.40
- **运行方式**: Gunicorn + Uvicorn

### 安全要求
- 禁止在配置文件中使用明文密码
- 必须使用非root用户运行（建议用户：www）
- 数据库密码需定期轮换（90天）

### 日志管理
- 访问日志路径: /www/wwwlogs/python/cs_aiwanba_net/gunicorn_acess.log
- 错误日志路径: /www/wwwlogs/python/cs_aiwanba_net/gunicorn_error.log
- 日志保留策略: 保留最近30天日志，自动归档旧日志

### 性能要求
- 最小工作进程数: 4
- 每个进程线程数: 2
- 请求超时时间: 30秒

---

## 首选库
| 库名称 | 版本 | 用途 |
|--------|------|------|
| vite   | ^5.0.0 | 前端构建工具 |
| react  | ^18.2.0 | 前端框架 |
| @tanstack/react-query | ^5.0.0 | 数据请求管理 |
| tailwindcss | ^3.0.0 | CSS框架 |
| shadcn/ui | ^0.5.0 | UI组件库 |
| gunicorn | ^21.2.0 | WSGI服务器 |
| uvicorn | ^0.29.0 | ASGI服务器 |
|        |      |      |

---

## 错误处理
（在此定义错误机制）
- 数据库连接失败必须重试3次（间隔2秒）
- 接口超时统一设置为5秒
- 全局异常需记录到错误日志并触发告警

---

## 文档规范
- **代码注释**：  
  （在此定义注释规范）
- **API文档**：  
  （在此定义API文档规范）
- **部署文档**：
  - 必须包含完整的配置参数说明
  - 敏感信息使用环境变量替代
  - 版本更新需同步更新部署文档

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 1 | doc/生产环境部署配置文档.md | 部署规范说明文档 |

### 修改文件
| 序列号 | 文件名称 | 修改内容 |
|-------|----------|----------|
| 1 | .cursorrules | 整合部署规范要求 |
| 2 | gunicorn_conf.py | 增加日志轮转配置 |

### 版本变更
| 版本号 | 变更说明 |
|-------|----------|
| x.x.x |          |

---

## 项目下一步
### 已实现功能
- （已实现功能列表）

### 未实现功能
- （未实现功能列表）

### 下一步计划
1. （开发计划）