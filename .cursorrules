# .cursorrules 文件
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

---

## 重要提示
- 每次编写代码必须更新 `.cursorrules` 文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围。
  - **编码标准**：定义代码风格、命名规范等。
  - **首选库**：列出项目中使用的库及其版本。
  - **文件结构**：描述项目的目录结构和文件组织方式。
  - **性能优化指南**：提供性能优化的建议和最佳实践。
  - **测试要求**：明确测试的范围、方法和工具。
  - **文档规范**：规定代码注释、README 文件等的编写标准。
  - **错误处理**：定义错误处理机制和日志记录方式。
  - **项目下一步**：明确项目下一步的计划和目标。
- 所有文件操作（创建、添加、修改、更新、优化、删除）必须记录序列号、文件名称和文件描述。

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

### 添加文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

### 修改文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

### 更新文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

### 优化文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

### 删除文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

---

## 项目背景
- **项目目标**：  
  （在此描述项目的具体目标和预期成果）  
- **项目范围**：  
  （在此描述项目的功能模块和边界）  

---

## 编码标准
1. **代码风格**：  
   - 遵循 [PEP 8](https://www.python.org/dev/peps/pep-0008/) 编程规范。
   - 使用 4 个空格进行缩进，不使用 Tab。
   - 函数和变量名使用小写字母和下划线分隔（`snake_case`）。
   - 类名使用大驼峰命名法（`CamelCase`）。
   - 每行代码不超过 120 个字符。
2. **注释规范**：  
   - 函数和类必须有文档字符串（docstring）。
   - 重要逻辑需添加详细注释。
   - 注释使用英文或中文，保持简洁明了。
3. **代码提交规范**：  
   - 提交信息格式：`[模块名] - [简要描述]`。
   - 示例：`[股票系统] - 添加市价单交易功能`。

---

## 首选库
- **编程语言**：Python 3.x
- **Web框架**：（如 Flask、Django 等）
- **数据库**：（如 MySQL、PostgreSQL 等）
- **依赖管理**：通过 `requirements.txt` 文件管理依赖包，推荐使用国内 PyPI 镜像源（如清华大学 [https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)）。

---

## 文件结构
| 文件夹 | 文件描述 |
|--------|----------|
| project_name/ | 项目根目录 |
| ├── app.py | 主程序入口 |
| ├── models.py | 数据库模型定义 |
| ├── routes.py | 路由定义（Web项目适用） |
| ├── config.py | 配置文件 |
| ├── utils.py | 工具函数 |
| ├── templates/ | HTML模板文件（Web项目适用） |
| ├── static/ | 静态资源（CSS、JS、图片等） |
| ├── tests/ | 测试代码 |
| ├── .cursorrules | 项目规范和配置文件 |
| ├── README.md | 项目说明文档 |
| └── requirements.txt | 依赖管理文件

---

## 性能优化指南
1. **数据库优化**：  
   - 使用索引优化查询性能。
   - 定期清理数据库中的冗余数据。
   - 使用连接池减少数据库连接开销。
2. **代码优化**：  
   - 避免重复计算，使用缓存机制（如 Flask-Caching）。
   - 减少不必要的循环和递归。
   - 使用异步任务处理耗时操作（如 Celery）。
3. **服务器优化**：  
   - 使用高性能的 WSGI 服务器（如 Gunicorn）。
   - 部署到高性能服务器或云平台。
   - 使用 CDN 加速静态资源加载。

---

## 测试要求
1. **测试范围**：  
   - 单元测试：覆盖所有模块的核心功能。
   - 集成测试：测试模块之间的交互。
   - 系统测试：测试整个系统的功能和性能。
2. **测试工具**：  
   - 单元测试：`pytest`。
   - 前端测试：`Selenium`。
   - 性能测试：`Locust`。
3. **测试覆盖率**：  
   - 单元测试覆盖率不低于 80%。
   - 集成测试覆盖率不低于 70%。

---

## 文档规范
1. **代码注释**：  
   - 函数和类必须有文档字符串（docstring）。
   - 重要逻辑需添加详细注释。
   - 注释使用英文或中文，保持简洁明了。
2. **README 文件**：  
   - 包含项目概述、安装指南、运行方法、使用说明、贡献指南等。
   - 使用 Markdown 格式编写。
3. **API 文档**：  
   - 使用 `Flask-RESTful` 或 `Flask-Swagger` 自动生成 API 文档。
   - 文档需包含请求方法、参数、返回值等信息。

---

## 错误处理
1. **错误分类**：  
   - **客户端错误**（4xx）：如非法请求、参数错误等。
   - **服务器错误**（5xx）：如内部错误、数据库连接失败等。
2. **错误处理机制**：  
   - 使用统一的错误处理中间件捕获异常。
   - 返回标准化的错误响应，包括错误代码和描述。
   - 记录错误日志，便于问题排查。
3. **日志记录**：  
   - 使用 `logging` 模块记录日志。
   - 日志级别包括 DEBUG、INFO、WARNING、ERROR。
   - 日志文件按日期分割，存储在 `logs/` 目录。

---

## 项目下一步
### 已实现功能
- （在此列出已实现的功能模块）

### 未实现功能
- （在此列出尚未实现的功能模块）

### 下一步计划
1. （在此列出下一步的开发计划和目标）
2. （可继续补充）