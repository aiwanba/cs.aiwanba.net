# .cursorrules 文件
# 本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次编写代码完成后，必须更新 .cursorrules 文件(检查更新本文件)，确保涵盖以下关键内容：
  - 项目背景：明确项目的目标和范围。
  - 编码标准：定义代码风格、命名规范等。
  - 首选库：列出项目中使用的库及其版本。
  - 文件结构：描述项目的目录结构和文件组织方式。
  - 性能优化指南：提供性能优化的建议和最佳实践。
  - 测试要求：明确测试的范围、方法和工具。
  - 文档规范：规定代码注释、README 文件等的编写标准。
  - 错误处理：定义错误处理机制和日志记录方式。
  - 项目下一步：明确项目下一步的计划和目标。
- 所有文件操作（创建、添加、修改、更新、优化、删除）必须记录序列号、文件名称和文件描述。

## 文件变更记录
# 请在此记录所有文件操作，包括创建、添加、修改、更新、优化和删除。

### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 1 | app.py | Flask应用主入口文件 |
| 2 | models/company.py | 公司模型定义文件 |
| 3 | models/user.py | 用户模型定义文件 |
| 4 | models/stock.py | 股票模型定义文件 |
| 5 | models/bank.py | 银行系统模型定义文件 |
| 6 | services/bank_service.py | 银行业务服务层 |
| 7 | api/bank_api.py | 银行系统API接口 |
| 8 | models/transaction.py | 交易系统模型定义文件 |
| 9 | services/transaction_service.py | 交易业务服务层 |
| 10 | api/transaction_api.py | 交易系统API接口 |
| 11 | services/stock_price_service.py | 股票价格更新服务 |
| 12 | tasks/stock_price_updater.py | 股票价格更新定时任务 |
| 13 | api/stock_api.py | 股票价格查询API |
| 14 | models/ai_strategy.py | AI交易策略模型 |
| 15 | services/ai_trading_service.py | AI交易服务 |
| 16 | api/ai_trading_api.py | AI交易API |
| 17 | requirements.txt | 项目依赖包管理文件 |

### 添加文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|

### 修改文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 1 | app.py | 添加银行系统蓝图注册 |
| 2 | app.py | 添加交易系统蓝图注册 |
| 3 | app.py | 添加股票系统蓝图注册和定时任务启动 |
| 4 | app.py | 添加AI交易系统蓝图注册 |

### 更新文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|

### 优化文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|

### 删除文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|

## 项目背景
# 这是一个基于Flask框架的Web应用项目，部署在Linux服务器上，使用Gunicorn作为WSGI服务器，MySQL作为数据库。项目目标是提供一个稳定可靠的Web服务。
# 1. 这是多人在线的股票交易游戏程序：
#   - 股票系统：
#     - 每个股票代表一家公司
#     - 公司基本信息：
#       - 公司名称
#       - 创建时间
#       - 所属玩家
#       - 初始资金
#     - 股票交易：
#       - 玩家可以买卖股票
#       - 支持市价单和限价单
#       - 实时更新股票价格
#     - 公司控制权：
#       - 持有超过51%股份的玩家获得公司控制权
#       - 控制权玩家可以决定公司运营方向
#     - 公司合并：
#       - 当一家公司持有另一家公司100%股份时
#       - 两家公司自动合并
#       - 新公司继承原公司资产
#   - 银行系统:
#     - 银行系统需要记录每笔交易，并记录每家公司的账户余额，每家公司有独立的账户
#     - 提供存款、取款、转账等基本功能
#     - 记录每笔交易的详细信息：交易时间、交易类型、交易金额、交易双方
#   - 交易系统:
#     - 交易系统需要记录每家公司的交易情况，每家公司有独立的交易记录
#     - 记录每笔交易的详细信息：交易时间、交易类型、交易数量、交易价格
#     - 提供交易历史查询功能
#   - AI系统:
#     - AI玩家由AI系统管理，AI系统可以创建AI玩家，并可以进行交易
#     - 要具备智能化根据公司系统、银行系统、股票系统、交易系统的数据分析，进行交易股票决策
#     - AI玩家应具备不同的交易策略：保守型、激进型、平衡型
#     - AI玩家可以学习其他玩家的交易模式，不断优化自己的交易策略

## 编码标准
1. 命名规范
   - 类名：使用驼峰命名法，如 BankAccount
   - 函数名：使用小写字母和下划线，如 create_account
   - 变量名：使用小写字母和下划线，如 current_price
   - 常量名：使用大写字母和下划线，如 MAX_RETRY_COUNT

2. 代码格式
   - 使用4个空格进行缩进
   - 每行最大长度为120字符
   - 类和函数之间空两行
   - 函数内的逻辑块之间空一行

3. 注释规范
   - 所有类和公共方法必须有文档字符串
   - 复杂的业务逻辑需要添加行内注释
   - 注释要说明代码的"为什么"而不是"是什么"

## 首选库
| 库名 | 版本 | 用途 |
|------|------|------|
| Flask | 2.0.1 | Web框架 |
| SQLAlchemy | 1.4.23 | ORM数据库框架 |
| Flask-SQLAlchemy | 2.5.1 | Flask的SQLAlchemy扩展 |
| Flask-Migrate | 3.1.0 | 数据库迁移工具 |
| APScheduler | 3.8.1 | 定时任务调度器 |
| pandas | 1.3.3 | 数据分析工具 |
| numpy | 1.21.2 | 科学计算库 |
| scikit-learn | 0.24.2 | 机器学习库 |

## 文件结构
```
project/
├── app.py              # 应用入口文件
├── config.py           # 配置文件
├── models/             # 数据模型
│   ├── __init__.py
│   ├── company.py     # 公司模型
│   ├── user.py        # 用户模型
│   └── stock.py       # 股票模型
├── services/          # 业务逻辑层
├── api/              # API路由
└── tests/            # 测试文件
```

## 性能优化指南
# 请在此提供性能优化的建议和最佳实践。

## 测试要求
1. 单元测试
   - 使用pytest框架
   - 测试覆盖率要求达到80%以上
   - 每个模块都要有对应的测试用例

2. 集成测试
   - 测试API接口的功能完整性
   - 测试数据库操作的正确性
   - 测试各个模块之间的交互

3. 性能测试
   - 测试并发处理能力
   - 测试数据库性能
   - 测试响应时间

## 文档规范
# 请在此规定代码注释、README 文件等的编写标准。

## 错误处理
1. 异常处理规范
   - 使用具体的异常类型而不是笼统的 Exception
   - 所有的API接口都要进行异常捕获
   - 数据库操作要在事务中进行
   - 记录关键错误日志

2. 日志记录
   - 使用Python的logging模块
   - 记录所有的错误和关键操作
   - 包含时间戳、错误类型和详细信息

## 项目下一步
1. 性能优化
   - [ ] 添加数据库索引
   - [ ] 实现缓存机制
   - [ ] 优化SQL查询

2. 功能增强
   - [ ] 添加更多的AI交易策略
   - [ ] 实现实时市场数据推送
   - [ ] 添加交易图表展示

3. 安全性
   - [ ] 添加API访问限制
   - [ ] 实现用户认证和授权
   - [ ] 加密敏感数据

4. 测试
   - [ ] 编写单元测试
   - [ ] 添加集成测试
   - [ ] 进行压力测试

## 文件依赖关系
1. 模型依赖
   - models/__init__.py: 依赖 app.py
   - models/company.py: 依赖 models/user.py
   - models/stock.py: 依赖 models/company.py
   - models/bank.py: 依赖 models/company.py
   - models/transaction.py: 依赖 models/company.py, models/stock.py
   - models/ai_strategy.py: 依赖 models/user.py

2. 服务层依赖
   - services/bank_service.py: 依赖 models/bank.py, models/company.py
   - services/transaction_service.py: 依赖 models/transaction.py, models/stock.py, services/bank_service.py
   - services/stock_price_service.py: 依赖 models/stock.py, models/transaction.py
   - services/ai_trading_service.py: 依赖 models/ai_strategy.py, services/transaction_service.py

3. API层依赖
   - api/bank_api.py: 依赖 services/bank_service.py
   - api/transaction_api.py: 依赖 services/transaction_service.py
   - api/stock_api.py: 依赖 services/stock_price_service.py
   - api/ai_trading_api.py: 依赖 services/ai_trading_service.py

4. 任务依赖
   - tasks/stock_price_updater.py: 依赖 services/stock_price_service.py
