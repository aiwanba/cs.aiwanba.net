# .cursorrules 文件模板
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次文件操作（创建/修改/删除）后必须立即更新本文件，确保记录与代码变更同步
- 每次编写代码必须更新本文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围
    - 目标需包含产品定位和核心功能
    - 范围应界定功能模块和技术边界
  - **编码标准**：定义代码风格、命名规范等
    - 需包含缩进、引号、分号等基础规则
    - 命名规范要区分变量/组件/常量
  - **首选库**：列出项目中使用的库及其版本
    - 格式：`库名称 | 语义化版本 | 主要用途`
    - 版本号必须使用^锁定主版本
  - **文件结构**：描述项目的目录结构和文件组织方式
    - 需说明核心目录作用
    - 重要配置文件的存放位置
  - **性能优化指南**：提供性能优化的建议和最佳实践
    - 包含加载优化、渲染优化等方案
    - 需注明适用场景和实现方式
  - **测试要求**：明确测试的范围、方法和工具
    - 单元测试覆盖率目标值
    - E2E测试的核心流程
  - **文档规范**：规定代码注释、README等的编写标准
    - 公共方法必须使用JSDoc注释
    - 复杂逻辑需添加行内说明
  - **错误处理**：定义错误处理机制和日志记录方式
    - 全局错误拦截方案
    - 日志分级和存储策略
  - **项目下一步**：明确后续计划
    - 区分已实现/未实现功能
    - 计划需包含优先级和预期时间
- 所有文件操作必须记录变更：
  - 创建文件需说明用途
  - 修改文件需描述变更内容
  - 版本变更遵循语义化版本规范
- 文件维护要求：
  - 保持.cursorrules与实际代码完全同步
  - 变更记录需在操作完成后立即更新
  - 代码提交前必须校验.cursorrules更新状态
  - 版本发布时必须校验变更记录完整性

---

## 项目背景
- **项目目标**：  
  构建一个基于 Flask 框架的在线股票交易游戏平台，让玩家通过与 AI 玩家互动，体验真实的股票市场交易过程，学习投资策略和风险管理。

- **项目范围**：  
  1. 核心功能模块：
     - 公司管理系统（创建、股票发行、收购合并）
     - 交易所系统（实时交易、价格走势）
     - 银行系统（存贷款、利率管理）
     - 新闻事件系统（市场动态、公司公告）
     - AI 玩家行为系统
     - 社交互动系统
     - 市场分析工具
     - 成就与排行榜系统

  2. 技术实现范围：
     - Web 服务端开发（Flask框架）
     - 实时数据处理（WebSocket）
     - 数据库交互（MySQL）
     - AI 行为算法实现
     - API 接口服务
     - 前端界面开发
     - 实时消息推送
     - 性能优化和安全防护

  3. 用户交互范围：
     - 玩家操作界面
     - 实时市场数据展示
     - 社交互动功能
     - 数据分析工具
     - 排行榜系统

---

## 编码标准
- **代码风格**：  
  - Python 代码遵循 PEP 8 规范
  - 使用 4 空格缩进
  - 文件使用 UTF-8 编码
- **命名规范**：  
  - 变量和函数使用小写字母加下划线
  - 类名使用驼峰命名
  - 常量使用大写字母加下划线

---

## 首选库
| 库名称 | 版本 | 用途 |
|--------|------|------|
| Flask | ^2.0+ | Web 框架 |
| gunicorn | ^20.0+ | WSGI HTTP 服务器 |
| uvicorn | ^0.15+ | ASGI 服务器 |
| MySQL-python | ^5.7.40 | MySQL 数据库驱动 |
| Flask-SQLAlchemy | ^2.5+ | ORM 数据库操作 |
| Flask-SocketIO | ^5.0+ | WebSocket 实时通信 |

---

## 文件结构
| 文件夹/文件 | 文件描述 |
|--------|----------|
| /www/wwwroot/cs.aiwanba.net/ | 项目根目录（待创建） |
| ├── app.py | 应用入口文件（待创建） |
| ├── gunicorn_conf.py | Gunicorn 配置文件（待创建） |
| ├── requirements.txt | 项目依赖文件（待创建） |
| ├── .cursorrules | 项目规范文件（当前文件） |
| └── doc/ | 文档目录（已创建） |
|     └── 生产环境部署配置文档.md | 部署配置说明文档（已创建） |
| /www/wwwlogs/python/cs_aiwanba_net/ | 日志目录（待创建） |

---

## 性能优化指南
- 使用 Gunicorn 多进程部署(4个工作进程)
- 每个进程配置2个线程
- 使用 uvicorn.workers.UvicornWorker 作为工作模式
- 配置合适的日志级别(info)避免性能损耗

---

## 测试要求
- 部署前检查数据库连接是否正常
- 检查端口(5010)是否可用
- 验证日志目录权限

---

## 文档规范
- **代码注释**：  
  - 所有函数必须包含功能说明
  - 复杂逻辑需要详细的行内注释
- **API文档**：  
  - 所有接口需要标注请求方法、参数和返回值
  - 接口文档需要包含示例

---

## 错误处理
- 错误日志路径：/www/wwwlogs/python/cs_aiwanba_net/gunicorn_error.log
- 访问日志路径：/www/wwwlogs/python/cs_aiwanba_net/gunicorn_acess.log
- 日志级别设置为 info
- 使用 Gunicorn 的内置错误处理机制

---

## 部署配置
### 基本信息
- **项目名称**: cs_aiwanba_net
- **项目端口**: 5010
- **Python版本**: 3.11.9
- **域名**: localhost

### 数据库配置
- **数据库**: MySQL 5.7.40
- **数据库名**: cs_aiwanba_net
- **用户名**: cs_aiwanba_net
- **密码**: sQz9HSnF5ZcXj9SX
- **主机**: localhost
- **端口**: 3306

### 启动配置
- **启动命令**: gunicorn -c gunicorn_conf.py app:app
- **项目路径**: /www/wwwroot/cs.aiwanba.net
- **框架**: flask
- **入口文件**: app.py

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 1 | doc/生产环境部署配置文档.md | 生产环境部署配置说明文档 |
| 2 | .cursorrules | 项目规范文件 |

### 修改文件
| 序列号 | 文件名称 | 修改内容 |
|-------|----------|----------|
| 1 | .cursorrules | 初始化项目规范文件 |

### 版本变更
| 版本号 | 变更说明 |
|-------|----------|
| 0.0.1 | 项目初始化：创建项目规范文件和部署文档 |

---

## 项目下一步
### 已实现功能
- 项目规范文件(.cursorrules)创建完成
- 部署配置文档创建完成

### 未实现功能
- 项目基础框架搭建
- 生产环境配置实现
- 所有核心功能模块开发

### 下一步计划
1. 创建项目基础框架
   - 创建项目目录结构
   - 创建并配置 app.py
   - 创建并配置 gunicorn_conf.py
   - 创建 requirements.txt
2. 实现数据库设计
3. 开发核心功能模块
4. 实现前端界面
5. 部署和测试
