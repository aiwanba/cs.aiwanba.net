# 重要提示：
# 1. 本文件记录项目的所有重要信息，必须及时更新！
# 2. 当进行以下操作时，必须更新本文件：
#    - 创建新文件：在第2.2节（项目结构）和第2.3节（项目结构代码更新）中添加相关文件说明，包括文件路径、功能描述和创建时间用是实际时间
#    - 修改文件：在第2.2节（项目结构）和第2.3节（项目结构代码更新）中添加相关文件说明，包括文件路径、功能描述和创建时间用是实际时间
#    - 删除文件：在第2.2节（项目结构）和第2.3节（项目结构代码更新）中添加相关文件说明，包括文件路径、功能描述和创建时间用是实际时间 
# 3. 如果变更涉及以下内容，也要更新相应章节：
#    - 部署环境 → 更新第1.4节（不能修改）
#    - 项目目标变更 → 更新第2.1节
#    - 项目结构变更 → 更新第2.2节
#    - 项目结构代码更新 → 更新第2.3节
#    - 项目结构下一步变更 → 更新第2.4节(下一步的计划都要写在这里)

## 1. 项目技术栈
### 1.1 前端
- **Vue.js 3.x**：简单易用，适合快速开发。

### 1.2 后端
- **Flask 2.0.1**：轻量级的 Python Web 框架，适合小型到中型应用。

### 1.3 数据库
- **MySQL 5.7.40**：关系型数据库，适合大多数应用，支持复杂查询。
- **mysql-connector-python**：纯Python实现的MySQL连接器，无需编译

### 1.4 部署环境

#### 1.4.1 服务器环境
- 部署路径：/
- 域名：localhost (注意：不要用绝对路径)
- 端口：5010
- 运行用户：www

#### 1.4.2 数据库配置
- 数据库版本: MySQL 5.7.40
- 数据库名: cs_aiwanba_net
- 用户名: cs_aiwanba_net
- 密码: sQz9HSnF5ZcXj9SX
- 主机: localhost
- 端口: 3306

#### 1.4.3 Python环境
- Python版本：3.11.9
- Web框架：Flask
- WSGI服务器：Gunicorn
- 入口文件：/app.py
- 应用名称：app

#### 1.4.4 依赖包
- 用文件requirements.txt（注意：没有文件就自动创建文件）

#### 1.4.5 Gunicorn配置
- 配置文件：/gunicorn_conf.py（注意：没有文件就自动创建文件）
```bash
# 项目目录
chdir = '/'

# 指定进程数
workers = 4

# 指定每个进程开启的线程数
threads = 2

#启动用户
user = 'www'

# 启动模式
worker_class = 'sync'

# 绑定的ip与端口
bind = '0.0.0.0:5010' 

# 设置进程文件目录（用于停止服务和重启服务，请勿删除）
pidfile = '/gunicorn.pid'

# 设置访问日志和错误信息日志路径
accesslog = '/gunicorn_acess.log'
errorlog = '/gunicorn_error.log'

# 日志级别，这个日志级别指的是错误日志的级别，而访问日志的级别无法设置
# debug:调试级别，记录的信息最多；
# info:普通级别；
# warning:警告消息；
# error:错误消息；
# critical:严重错误消息；
loglevel = 'info' 

# 自定义设置项请写到该处
# 最好以上面相同的格式 <注释 + 换行 + key = value> 进行书写， 
# PS: gunicorn 的配置文件是python扩展形式，即".py"文件，需要注意遵从python语法，
# 如：loglevel的等级是字符串作为配置的，需要用引号包裹起来
```

## 1.5 常见问题及解决方案
- **问题**：如何解决依赖包冲突？
  - **解决方案**：使用虚拟环境（如 venv）来隔离项目依赖。

## 2. 项目说明
### 2.1 项目目标  
- 这是一个模拟股票投资的多人游戏，玩家将与AI对手同台竞技。在游戏中，玩家可以通过买卖股票来赚取收益，所有交易都在虚拟交易所进行。每支股票代表不同的虚拟公司，玩家需要根据市场变化做出投资决策，力争在竞争中脱颖而出。
- 游戏的核心目标是运用投资策略和市场分析能力，成为最终的赢家。玩家需要密切关注虚拟市场中的各种信息，包括公司公告、行业动态和经济指标等，这些因素都会影响股价走势，帮助玩家做出更明智的投资选择。
- 游戏采用动态市场机制，所有市场数据都由玩家的交易行为实时生成。这意味着每个玩家的买卖决策都会影响整体市场走向，增加了游戏的策略深度和互动性。
- 为了模拟真实交易环境，虚拟交易所全天候开放，玩家可以随时进行交易操作，把握市场机会，最大化投资收益。

### 2.2. 项目结构
- **.gitignore**：Git忽略文件配置，创建时间：2023-10-15
- **requirements.txt**：Python依赖包列表，创建时间：2023-10-15
- **app.py**：Flask应用入口文件，创建时间：2023-10-15
- **init_db.py**：数据库初始化脚本，创建时间：2023-10-16
- **auth.py**：用户认证模块，创建时间：2023-10-16
- **models.py**：数据库模型文件，创建时间：2023-10-16
- **trade.py**：股票交易API，创建时间：2023-10-16
- **market.py**：股票价格波动模拟模块，创建时间：2023-10-16
- **extensions.py**：Flask扩展模块，创建时间：2023-10-16

### 2.3. 项目结构代码更新
- 2023-10-15：创建基础项目结构，包括.gitignore、requirements.txt和app.py文件
- 2023-10-16：添加数据库模型，包括用户表、股票表和交易记录表
- 2023-10-16：将mysqlclient替换为mysql-connector-python
- 2023-10-16：创建init_db.py文件，用于数据库初始化
- 2023-10-16：创建auth.py文件，实现用户注册/登录功能
- 2023-10-16：创建models.py文件，分离数据库模型
- 2023-10-16：创建trade.py文件，实现股票交易API
- 2023-10-16：创建market.py文件，实现股票价格波动模拟
- 2023-10-16：创建extensions.py文件，分离Flask扩展
- 2023-10-16：修改app.py文件，在启动时自动运行init_db.py

### 2.4. 项目结构下一步
1. 添加更多股票数据
2. 实现AI对手的自动交易策略


