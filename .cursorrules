# .cursorrules 文件模板
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次文件操作（创建/修改/删除）后必须立即更新本文件，确保记录与代码变更同步
- 每次编写代码必须更新本文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围
    - 目标需包含产品定位和核心功能
    - 范围应界定功能模块和技术边界
  - **编码标准**：定义代码风格、命名规范等
    - 需包含缩进、引号、分号等基础规则
    - 命名规范要区分变量/组件/常量
  - **首选库**：列出项目中使用的库及其版本
    - 格式：`库名称 | 语义化版本 | 主要用途`
    - 版本号必须使用^锁定主版本
  - **文件结构**：描述项目的目录结构和文件组织方式
    - 需说明核心目录作用
    - 重要配置文件的存放位置
  - **性能优化指南**：提供性能优化的建议和最佳实践
    - 包含加载优化、渲染优化等方案
    - 需注明适用场景和实现方式
  - **测试要求**：明确测试的范围、方法和工具
    - 单元测试覆盖率目标值
    - E2E测试的核心流程
  - **文档规范**：规定代码注释、README等的编写标准
    - 公共方法必须使用JSDoc注释
    - 复杂逻辑需添加行内说明
  - **错误处理**：定义错误处理机制和日志记录方式
    - 全局错误拦截方案
    - 日志分级和存储策略
  - **项目下一步**：明确后续计划
    - 区分已实现/未实现功能
    - 计划需包含优先级和预期时间
- 所有文件操作必须记录变更：
  - 创建文件需说明用途
  - 修改文件需描述变更内容
  - 版本变更遵循语义化版本规范
- 文件维护要求：
  - 保持.cursorrules与实际代码完全同步
  - 变更记录需在操作完成后立即更新
  - 代码提交前必须校验.cursorrules更新状态
  - 版本发布时必须校验变更记录完整性

---

## 项目背景
- **项目目标**：  
  开发Web在线股票交易模拟游戏，通过玩家与AI的交互行为动态生成市场环境，核心功能模块包括：
  1. 公司系统
  - 玩家创建公司/设定股票发行参数
  - 股票价值由市场供需动态决定
  - 支持公司收购与合并机制
  2. 交易所系统
  - 实时股票交易市场（玩家+AI）
  - 价格完全由供需关系驱动
  - 提供实时交易数据可视化
  3. 银行系统
  - 动态利率资金管理系统
  - 贷款/存款/利息计算功能
  - 经济政策自动调节机制
  4. 新闻事件系统
  - 玩家行为触发新闻机制
  - AI决策生成事件系统
  - 市场情绪影响模型
  5. AI行为系统
  - 多策略投资算法（长期/短期/激进）
  - 动态调整的行为决策树
  - 市场复杂性生成模块
  6. 社交系统
  - 实时聊天/论坛功能
  - 投资联盟组建机制
  7. 分析工具
  - 股票走势可视化工具
  - 公司财务分析模块
  8. 成就系统
  - 投资里程碑成就
  - 实时财富排行榜

- **项目范围**：  
  - 核心模块：公司管理、股票交易、AI行为、经济系统
  - 技术边界：
    - 基于浏览器的2D界面
    - 使用WebSocket实现实时交易
    - 排除移动端原生支持
    - 不涉及真实货币交易

---

## 编码标准
- **代码风格**：  
  1. 遵循PEP8规范，使用Black代码格式化工具
  2. 缩进使用4个空格，字符串使用双引号
  3. 类型注解强制要求，复杂参数必须使用TypeVar
  4. 禁止使用单字符变量名（循环变量除外）
  5. 类方法第一个参数必须为self，类方法必须使用@classmethod装饰器

- **命名规范**：  
  1. 变量/函数：小写字母+下划线（snake_case）
  2. 类名：大驼峰（UpperCamelCase）
  3. 常量：全大写+下划线
  4. 私有属性：前缀单下划线
  5. 组件命名：股票交易相关类前缀Stock（例：StockExchange）

---

## 首选库
| 库名称 | 版本 | 用途 |
|--------|------|------|
| Flask | ^2.3.3 | Web应用框架 |
| Gunicorn | ^21.2.0 | WSGI HTTP服务器 |
| uvicorn | ^0.23.2 | ASGI服务器实现 |
| PyMySQL | ^1.1.0 | MySQL数据库连接 |

---

## 文件结构
| 文件夹 | 文件描述 |
|--------|----------|
| doc/ | 存放项目文档，包含部署配置、架构设计等 |

---

## 性能优化指南
1. **数据库优化**：
   - 使用连接池管理MySQL连接（推荐PyMySQL>=1.1.0）
   - 高频查询必须添加索引
   - 批量操作使用executemany

2. **缓存策略**：
   - 使用Redis缓存实时交易数据（TTL>=30s）
   - 股票价格更新使用消息队列缓冲

3. **Web服务优化**：
   - Gunicorn配置最少4个worker进程
   - 启用uvicorn的lifespan事件处理
   - 静态资源使用CDN加速

4. **异步处理**：
   - 耗时操作（如AI决策）使用Celery任务队列
   - 日志写入使用独立线程

---

## 测试要求
1. **单元测试**：
   - 核心模块覆盖率≥85%
   - 使用pytest框架+coverage统计
   - 每个API必须包含成功/失败用例

2. **E2E测试**：
   - 使用Postman进行接口链式测试
   - 模拟100并发交易请求
   - 包含异常网络中断测试

3. **测试数据**：
   - 使用Faker生成测试数据
   - 每个测试用例独立数据库事务
   - 生产环境禁止使用测试数据

---

## 文档规范
- **代码注释**：
  1. 公共方法必须包含Args/Returns/Examples
  2. 复杂算法需添加实现原理说明
  3. 临时解决方案需标注# TODO

- **API文档**：
  1. 使用OpenAPI 3.0规范
  2. 每个接口包含请求示例和响应模板
  3. 错误代码集中维护在errors.md

---

## 错误处理
1. **异常处理**：
   - 使用Flask errorhandler统一拦截
   - 业务异常继承CustomAPIException
   - 数据库异常自动回滚事务

2. **日志规范**：
   - 分级：DEBUG < INFO < WARNING < ERROR
   - 格式：[时间] [级别] [模块] [请求ID] 信息
   - 存储：按天分割，保留30天

3. **监控报警**：
   - ERROR日志触发Slack通知
   - 接口响应时间>1s记录警告
   - 每日生成健康报告

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
| 1 | doc/生产环境部署配置文档.md | 记录生产环境部署配置标准，包含服务器配置、数据库设置、Gunicorn参数及日志管理规范 |

### 修改文件
| 序列号 | 文件名称 | 修改内容 |
|-------|----------|----------|
| 3 | .cursorrules | 添加生产环境文档创建记录，更新文件结构描述 |
| 4 | .cursorrules | 补充编码标准、性能优化、测试要求、文档规范、错误处理等核心章节内容 |

### 版本变更
| 版本号 | 变更说明 |
|-------|----------|
| 0.1.0 | 初始化项目配置文档，添加生产环境部署规范 |
| 0.2.0 | 完善项目规范文档体系，增加编码标准、测试规范等核心内容 |

---

## 项目下一步
### 已实现功能

### 未实现功能

### 下一步计划


