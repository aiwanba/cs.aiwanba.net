# .cursorrules 文件模板
本文件用于记录项目的规范和配置信息。请根据项目实际情况填写以下内容。

## 重要提示
- 每次文件操作（创建/修改/删除）后必须立即更新本文件，确保记录与代码变更同步
- 每次编写代码必须更新本文件，确保涵盖以下关键内容：
  - **项目背景**：明确项目的目标和范围
    - 目标需包含产品定位和核心功能
    - 范围应界定功能模块和技术边界
  - **编码标准**：定义代码风格、命名规范等
    - 需包含缩进、引号、分号等基础规则
    - 命名规范要区分变量/组件/常量
  - **首选库**：列出项目中使用的库及其版本
    - 格式：`库名称 | 语义化版本 | 主要用途`
    - 版本号必须使用^锁定主版本
  - **文件结构**：描述项目的目录结构和文件组织方式
    - 需说明核心目录作用
    - 重要配置文件的存放位置
  - **性能优化指南**：提供性能优化的建议和最佳实践
    - 包含加载优化、渲染优化等方案
    - 需注明适用场景和实现方式
  - **测试要求**：明确测试的范围、方法和工具
    - 单元测试覆盖率目标值
    - E2E测试的核心流程
  - **文档规范**：规定代码注释、README等的编写标准
    - 公共方法必须使用JSDoc注释
    - 复杂逻辑需添加行内说明
  - **错误处理**：定义错误处理机制和日志记录方式
    - 全局错误拦截方案
    - 日志分级和存储策略
  - **项目下一步**：明确后续计划
    - 区分已实现/未实现功能
    - 计划需包含优先级和预期时间
- 所有文件操作必须记录变更：
  - 创建文件需说明用途
  - 修改文件需描述变更内容
  - 版本变更遵循语义化版本规范
- 文件维护要求：
  - 保持.cursorrules与实际代码完全同步
  - 变更记录需在操作完成后立即更新
  - 代码提交前必须校验.cursorrules更新状态
  - 版本发布时必须校验变更记录完整性

---

## 项目背景
- **项目目标**：  
  开发Web在线股票交易模拟游戏，通过玩家与AI的交互行为动态生成市场环境，核心功能模块包括：
  1. 公司系统
  - 玩家创建公司/设定股票发行参数
  - 股票价值由市场供需动态决定
  - 支持公司收购与合并机制
  2. 交易所系统
  - 实时股票交易市场（玩家+AI）
  - 价格完全由供需关系驱动
  - 提供实时交易数据可视化
  3. 银行系统
  - 动态利率资金管理系统
  - 贷款/存款/利息计算功能
  - 经济政策自动调节机制
  4. 新闻事件系统
  - 玩家行为触发新闻机制
  - AI决策生成事件系统
  - 市场情绪影响模型
  5. AI行为系统
  - 多策略投资算法（长期/短期/激进）
  - 动态调整的行为决策树
  - 市场复杂性生成模块
  6. 社交系统
  - 实时聊天/论坛功能
  - 投资联盟组建机制
  7. 分析工具
  - 股票走势可视化工具
  - 公司财务分析模块
  8. 成就系统
  - 投资里程碑成就
  - 实时财富排行榜

- **项目范围**：  
  - 核心模块：公司管理、股票交易、AI行为、经济系统
  - 技术边界：
    - 基于浏览器的2D界面
    - 使用WebSocket实现实时交易
    - 排除移动端原生支持
    - 不涉及真实货币交易

---

## 编码标准
- **代码风格**：  
  - 使用ESLint + Prettier统一代码格式
  - 缩进：2个空格
  - 字符串使用单引号
  - 必须使用分号结尾
  - React组件使用函数式组件+TypeScript
- **命名规范**：  
  - 变量/函数：camelCase
  - 组件：PascalCase
  - 常量：UPPER_CASE
  - 类型/接口：I前缀+PascalCase（如IStockData）
  - 事件处理函数：handle前缀（如handleBuyStock）

---

## 首选库
| 库名称 | 版本 | 用途 |
|--------|------|------|
| React | ^18.2.0 | 前端框架 |
| Socket.IO | ^4.7.2 | 实时交易通信 |
| Recharts | ^2.8.0 | 数据可视化 |
| Redux Toolkit | ^1.9.5 | 状态管理 |
| TypeScript | ^5.0.4 | 类型检查 |
| Jest | ^29.7.0 | 单元测试 |

---

## 文件结构
| 文件夹 | 文件描述 |
|--------|----------|
| src/components | 可复用UI组件 |
| src/services | WebSocket服务/API交互 |
| src/features | Redux状态切片 |
| src/pages | 路由页面组件 |
| public/config | 环境配置文件 |
| tests | 测试用例目录 |

---

## 性能优化指南
1. WebSocket连接优化：
  - 使用消息压缩（如permessage-deflate）
  - 心跳机制保持连接活性
2. 数据可视化优化：
  - 虚拟滚动长列表
  - 图表数据采样（1分钟粒度）
3. 状态管理优化：
  - 使用Redux批量更新
  - 记忆化选择器（reselect）

---

## 测试要求
- 单元测试覆盖率目标：
  - 业务逻辑层：100%
  - UI组件：80%+
- E2E测试核心流程：
  1. 用户注册/登录
  2. 股票买卖流程
  3. 公司创建流程
- 使用Testing Library + Cypress

---

## 文档规范
- **代码注释**：  
  - 复杂算法必须添加JSDoc说明
  - 自定义Hooks需注释输入输出
  - 类型定义需说明字段用途
- **API文档**：  
  - 使用Swagger维护接口文档
  - WebSocket消息协议单独文档

---

## 错误处理
- 全局错误边界（Error Boundary）
- WebSocket断线自动重连
- 关键操作事务回滚机制
- 错误分级（DEBUG/INFO/WARN/ERROR）
- Sentry监控生产环境错误

---

## 文件变更记录
### 创建文件
| 序列号 | 文件名称 | 文件描述 |
|-------|----------|----------|
|       |          |          |

### 修改文件
| 序列号 | 文件名称 | 修改内容 |
|-------|----------|----------|
| 1 | .cursorrules | 完善项目目标模块描述，明确8个核心系统功能 |
| 2 | .cursorrules | 定义项目范围的技术边界和功能模块优先级 |
| 3 | .cursorrules | 补充编码标准和命名规范 |
| 4 | .cursorrules | 添加技术选型库列表 |
| 5 | .cursorrules | 定义目录结构规范 |
| 6 | .cursorrules | 完善性能优化方案 |
| 7 | .cursorrules | 制定测试要求标准 |
| 8 | .cursorrules | 补充文档规范细则 |
| 9 | .cursorrules | 建立错误处理机制 |

### 版本变更
| 版本号 | 变更说明 |
|-------|----------|
| x.x.x |          |

---

## 项目下一步
### 已实现功能
- （已实现功能列表）

### 未实现功能
- （未实现功能列表）

### 下一步计划
1. （开发计划）